from transformers import Pipeline
from langchain.vectorstores import FAISS
from reranker import get_reranker, get_rag_prompt_template
from typing import List, Tuple
from langchain.docstore.document import Document as LangchainDocument
import streamlit as st  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Streamlit

def answer_with_rag2(
    question: str,
    llm: Pipeline,
    knowledge_index: FAISS,
    num_retrieved_docs: int = 30,
    num_docs_final: int = 10,
) -> Tuple[str, List[LangchainDocument]]:
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞
    st.write("=> Retrieving documents...")
    relevant_docs = knowledge_index.similarity_search(query=question, k=num_retrieved_docs)
    relevant_contents = [doc.page_content for doc in relevant_docs]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–∫–µ—Ä (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ CrossEncoder)
    reranker = get_reranker()
    
    st.write("=> Reranking documents...")
    try:
        # CrossEncoder —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–∞—á–µ, —á–µ–º ColBERT
        scores = reranker.predict([(question, doc) for doc in relevant_contents])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        scored_docs = list(zip(relevant_docs, scores))
        scored_docs.sort(key=lambda x: x[1], reverse=True)
        
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        full_docs = [doc for doc, score in scored_docs[:num_docs_final]]
        relevant_contents = [doc.page_content for doc in full_docs]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–µ: {e}")
        full_docs = relevant_docs[:num_docs_final]
        relevant_contents = relevant_contents[:num_docs_final]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    context = "\nExtracted documents:\n"
    context += "".join([f"Document {i}:::\n{doc}\n" for i, doc in enumerate(relevant_contents)])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    st.write("=> Generating answer...")
    RAG_PROMPT_TEMPLATE = get_rag_prompt_template()
    final_prompt = RAG_PROMPT_TEMPLATE.format(question=question, context=context)
    answer = llm(final_prompt)[0]["generated_text"]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    st.markdown("\n## –û—Ç–≤–µ—Ç")
    st.write(answer)
    
    st.markdown("## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    for i, doc in enumerate(full_docs[:num_docs_final]):
        with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}"):
            st.write(doc.page_content)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if hasattr(doc, 'metadata') and doc.metadata:
                if "longitude" in doc.metadata and "latitude" in doc.metadata:
                    st.write(f"üìç –®–∏—Ä–æ—Ç–∞: {doc.metadata['latitude']}, –î–æ–ª–≥–æ—Ç–∞: {doc.metadata['longitude']}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if "image" in doc.metadata and doc.metadata["image"]:
                    try:
                        if isinstance(doc.metadata["image"], str):
                            if doc.metadata["image"].startswith('data:image'):
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                                st.image(doc.metadata["image"], caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i+1}")
                            else:
                                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                                st.image(doc.metadata["image"], caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i+1}")
                        elif isinstance(doc.metadata["image"], bytes):
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            st.image(doc.metadata["image"], caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i+1}")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    return answer, full_docs[:num_docs_final]